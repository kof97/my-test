上一篇我们把整个架构演变过程大致说了一下，这次我们来说说从哪方面进行考虑设计

为了使网站的能够应对高并发访问，海量数据处理，高可靠运行等一系列问题，我们可以选择横向或纵向两个方向来入手

# 基本思路

首先可以对整个架构进行分层，一般可以分为 `应用层`，`服务层`，`数据层`；实践中，大的分层结构中还可以继续分层，比如 `应用层` 还可以继续分为 `视图层` 和 `业务逻辑层`，服务层也可以继续细分为 `数据接口层` `逻辑处理层` 等

通过分层，我们把一个庞大的系统切分为不同的部分，便于分工开发和维护；各层之间相互有一定的独立性，在网站的开发中可以根据不同的需求进行相应的调整

逻辑上分层之后，在物理部署上也可以根据需求制定不同的策略，刚开始可以部署在同一台物理机上，但是随着业务的发展，必然要对不同的模块进行分离部署

分层架构不仅仅是为了规划软件的逻辑结构以便于开发维护，随着网站的发展，分层架构对网站的高并发分布式架构来说尤为重要

进行了分层以后，接下来可以从纵向进行业务分割

根据不同的业务模块一个项目划分成不同的模块交给单独的团队去开发部署，完成后分别部署在不同的服务器上，通过链接进行互联

再根据不同情况来对不同的节点进行冗余来保证网站的高可用性

接下来进行缓存，CDN，反向代理等等的优化，这里以后再细说

---

好了，现在我们开始进入正题

# 架构要素

首先，对于一个高访问量，大数据量的网站我们需要考虑什么呢？

## 性能

首先就是性能了，性能是一个网站的的重要指标，除非是没得选择，就这一个网站，不然用户是绝对不会忍受一个超级慢的网站

正因为性能问题无处不在，解决性能问题的方式也各种各样，从用户请求一个 url 开始，进行的每一个环节都可以进行优化；根据上面的分层，可以大致从三个方面进行优化，应用层优化，服务层优化，数据层优化

涉及到的知识就是 web 前端的优化，应用服务器端的优化和数据的存储，索引，缓存等，这些在后面的内容里会分别展开细说

但性能只是一个网站的必要条件，除此之外，因为无法预知网站可能会面临的压力或是攻击，我们还要保证网站在各种情境下（高并发，高负载，持续压力不均匀等）保持稳定的性能

## 可用性

对于大型网站而言，出现宕机的情况是可怕的，因为你可能有上千万的用户量，短短几分钟的宕机都有可能导致网站声誉扫地，如果是电商类的网站，更可能会导致用户的财产损失，甚至会摊上官司，那时候损失的就不仅是金钱和用户了

因此我们要保证能够提供每天 24 小时的可用，但实际中服务器并不能保证每天 24 小时都能平稳的运行，可能出现硬件问题，也可能出现软件问题，总之问题总是会有的

所以我们高可用设计的目标就是在某些服务器宕机的情况下，也能够保证服务或应用正常运行

网站高可用的主要手段是 `冗余`，应用部署在多台服务器上同时提供访问，数据存储在多台数据服务器之间互相进行热备份，这样任何一台服务器宕机都不会影响服务或应用的整体，也不会产生数据丢失

对于应用服务器而言，多台应用服务器通过一个负载均衡设备组成一个集群同时对外提供服务，当一台服务器宕机后，服务切换到其他服务器上继续执行，这样就可以保证了网站的高可用性，前提是应用服务器不允许存储用户会话信息，否则将会丢失，这样即使用户请求转接到其他服务器上面也无法继续执行

对于数据存储服务器，要提供服务器之间的实时备份，这样当一台服务器宕机的时候，将数据访问切换到其他服务器上，并进行数据恢复和备份

衡量一个系统架构设计是否满足高可用的目标，就是假设其中一台或多台服务器宕机以及出现各种不可预期的问题时，系统整体是否依然可用

## 




## 

# 

## 